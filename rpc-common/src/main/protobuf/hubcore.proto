syntax = "proto3";
package to.etc.cocos.messages;

// The challenge format sent by the hub to a client or server connecting (the first packet)
message HelloChallenge {
    string serverVersion = 1;
    bytes challenge = 2;
}

// A server sends this response. If its challenge response matches the hub's key
// then the server is allowed
message ServerHeloResponse {
    string serverVersion = 1;
    bytes challengeResponse = 2;
}

message ClientAuthRequest {
    string clientVersion = 1;
    bytes challenge = 2;
    bytes challengeResponse = 3;
    string clientId = 4;
}

//-- A client sends this response. Its challenge will be forwarded to a server it addresses
message ClientHeloResponse {
    string clientVersion = 1;
    bytes challengeResponse = 2;
}

message ClientInventory {
    string dataFormat = 1;
}

message AuthResponse {
}
message Ping {}
message Pong {}

//-- Errors sent when there is a transport level error
message HubErrorResponse {
    string code = 1;
    string text = 2;
    string details = 3;
    string extraMessage = 4;
    string extraBytes = 5;
}

//-- A command sent to the client
message Command {
    string name = 1;
    string id = 2;
    string dataFormat = 3;
    string parameters = 4;
}

//-- The command's result. This finishes the command
message CommandResponse {
    string name = 1;
    string id = 2;
    string dataFormat = 3;
}

//-- Indicates that the peer did a complete restart, meaning its running commands are lost
message PeerRestarted {
}

//-- A command failure notification. This finishes the command
message CommandError {
    string name = 1;
    string id = 2;
    string code = 3;
    string message = 4;
    string details = 5;
}

//message CommandProgress {
//    string name = 1;
//    string id = 2;
//    string code = 3;
//    string task = 4;
//    string percentageComplete = 5;
//}

message CommandOutput {
    string name = 1;
    string id = 2;
    int32 sequence = 3;
    string code = 4;
    string encoding = 5;
    int32 progress = 6;
}

message Ack {
    int32 sequence = 1;
}

//-- Event classes
message ClientDisconnected {}

message ClientConnected {}

message AckableMessage {
    int32 sequence = 1;

    oneof payload {
        Command cmd = 11;                           // server -> client
        CommandResponse response = 12;              // client -> server
        CommandError commandError = 13;             // client -> server
        CommandOutput output = 14;                  // client -> server
        PeerRestarted peerRestarted = 15;           // client -> server
    }
}

message Envelope {
     int32 version = 1;
     string sourceId = 2;
     string targetId = 3;

     oneof payload {
         AckableMessage ackable = 5;

         Ack ack = 6;                               // Both sides
         Ping ping = 7;                             // server -> client
         Pong pong = 8;                             // client -> server

         HelloChallenge challenge  = 9;             // server -> client
         ServerHeloResponse heloServer = 10;        // client -> server
         ClientHeloResponse heloClient = 11;        // client -> server
         ClientAuthRequest clientAuth = 12;         // hub -> server
         HubErrorResponse hubError = 13;            // hub -> server (fatal)
         AuthResponse auth = 14;                    // Server -> hub
         ClientInventory inventory = 15;            // client -> server
         ClientConnected clientConnected = 16;      // client -> server
         ClientDisconnected clientDisconnected = 17;    // client -> server
     }
}
